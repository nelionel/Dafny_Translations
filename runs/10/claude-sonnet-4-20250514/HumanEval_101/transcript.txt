======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """


======MODEL OUTPUT======
Looking at this problem, I need to split a string into words where words can be separated by either commas or spaces (or both). I'll use regular expressions to handle multiple separators.

```python
import re

def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
    if not s or not s.strip():
        return []
    
    # Split by comma and/or space, filter out empty strings
    words = re.split(r'[,\s]+', s.strip())
    return [word for word in words if word]
```

The solution works as follows:

1. First, I check if the string is empty or contains only whitespace, returning an empty list if so
2. I use `re.split(r'[,\s]+', s.strip())` to split the string:
   - `[,\s]+` matches one or more commas or whitespace characters
   - `s.strip()` removes leading/trailing whitespace
3. I filter out any empty strings that might result from consecutive separators
4. Return the list of words

This handles various cases like:
- "Hi, my name is John" → ["Hi", "my", "name", "is", "John"]
- "One, two, three, four, five, six" → ["One", "two", "three", "four", "five", "six"]
- "word1,word2, word3  ,  word4" → ["word1", "word2", "word3", "word4"]