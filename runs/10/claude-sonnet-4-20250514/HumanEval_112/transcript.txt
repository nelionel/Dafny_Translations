======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Remove all characters from string `s` that appear in string `c`
2. Check if the resulting string is a palindrome
3. Return a tuple with the result string and a boolean indicating if it's a palindrome

Let me trace through the examples:
- For s = "abcde", c = "ae": Remove 'a' and 'e' → "bcd", which is not a palindrome
- For s = "abcdef", c = "b": Remove 'b' → "acdef", which is not a palindrome  
- For s = "abcdedcba", c = "ab": Remove 'a' and 'b' → "cdedc", which is a palindrome

```python
def reverse_delete(s, c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
    # Convert c to a set for faster lookup
    chars_to_remove = set(c)
    
    # Remove all characters from s that are in c
    result_string = ''.join(char for char in s if char not in chars_to_remove)
    
    # Check if the result string is a palindrome
    is_palindrome = result_string == result_string[::-1]
    
    return (result_string, is_palindrome)
```

The solution works as follows:

1. **Convert `c` to a set**: This makes character lookup O(1) instead of O(n) for each character check
2. **Filter characters**: Use a generator expression with `join()` to build a new string containing only characters from `s` that are not in `c`
3. **Palindrome check**: Compare the result string with its reverse using slicing (`[::-1]`)
4. **Return tuple**: Return both the filtered string and the palindrome check result

Time complexity: O(n + m) where n is the length of string `s` and m is the length of string `c`
Space complexity: O(n + m) for storing the character set and result string