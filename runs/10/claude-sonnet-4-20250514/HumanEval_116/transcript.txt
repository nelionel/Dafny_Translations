======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """


======MODEL OUTPUT======
Looking at this problem, I need to sort an array based on:
1. Primary key: number of ones in binary representation (ascending)
2. Secondary key: decimal value (ascending) for ties

Let me analyze the examples:
- `[1, 5, 2, 3, 4]` → `[1, 2, 3, 4, 5]`
- `[-2, -3, -4, -5, -6]` → `[-6, -5, -4, -3, -2]`
- `[1, 0, 2, 3, 4]` → `[0, 1, 2, 3, 4]`

I notice the function description mentions "non-negative integers" but the examples include negative numbers. I'll handle both cases by counting ones in the binary representation of the absolute value.

```python
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.
    """
    def count_ones(n):
        # Count ones in binary representation of absolute value
        return bin(abs(n)).count('1')
    
    # Sort by: (number of ones in binary, decimal value)
    return sorted(arr, key=lambda x: (count_ones(x), x))
```

The solution works as follows:

1. **`count_ones(n)`**: Helper function that counts the number of '1' bits in the binary representation of the absolute value of n
2. **`sorted(arr, key=lambda x: (count_ones(x), x))`**: Sorts the array using a tuple as the key:
   - First element: number of ones in binary representation
   - Second element: the original decimal value
   - Python's sort is stable and sorts tuples lexicographically

For the examples:
- `1` (binary: 1) has 1 one, `5` (binary: 101) has 2 ones, `2` (binary: 10) has 1 one, etc.
- Numbers with the same count of ones are sorted by their decimal value
- For negative numbers, we count ones in their absolute value's binary representation