======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''


======MODEL OUTPUT======
Looking at this problem, I need to check if I can concatenate two strings of parentheses in some order to create a balanced string.

Let me think about the approach:
1. I can try both possible concatenations: `lst[0] + lst[1]` and `lst[1] + lst[0]`
2. For each concatenation, I need to check if the parentheses are balanced
3. A string is balanced if at no point do we have more closing parentheses than opening ones, and the total count of opening and closing parentheses is equal

To check if a string is balanced:
- Keep a counter starting at 0
- For each '(', increment the counter
- For each ')', decrement the counter
- If the counter ever goes negative, the string is not balanced
- At the end, the counter should be 0 for a balanced string

```python
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    
    def is_balanced(s):
        """Check if a string of parentheses is balanced"""
        counter = 0
        for char in s:
            if char == '(':
                counter += 1
            else:  # char == ')'
                counter -= 1
                if counter < 0:
                    return False
        return counter == 0
    
    # Try both possible concatenations
    option1 = lst[0] + lst[1]
    option2 = lst[1] + lst[0]
    
    if is_balanced(option1) or is_balanced(option2):
        return 'Yes'
    else:
        return 'No'
```