======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Generate the Collatz sequence starting from n
2. Collect all odd numbers from that sequence
3. Return them in a sorted list

Let me trace through the example:
- Start with 5 (odd)
- 5 → 3×5+1 = 16 (even)
- 16 → 16/2 = 8 (even)
- 8 → 8/2 = 4 (even)
- 4 → 4/2 = 2 (even)
- 2 → 2/2 = 1 (odd)
- Stop at 1

So the sequence is [5, 16, 8, 4, 2, 1] and the odd numbers are [5, 1], which when sorted is [1, 5].

```python
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
    odd_numbers = []
    current = n
    
    while current != 1:
        if current % 2 == 1:  # if current is odd
            odd_numbers.append(current)
            current = 3 * current + 1
        else:  # if current is even
            current = current // 2
    
    # Add 1 to the list since we always reach 1
    odd_numbers.append(1)
    
    # Return sorted list
    return sorted(odd_numbers)
```