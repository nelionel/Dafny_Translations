======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''


======MODEL OUTPUT======
Looking at this problem, I need to check two conditions:
1. The list is sorted in ascending order (non-decreasing)
2. No number appears more than twice (if it appears 3+ times, return False)

Let me trace through the examples to understand the pattern:
- `[1, 2, 2, 3, 3, 4]` → True (sorted, each duplicate appears at most twice)
- `[1, 2, 2, 2, 3, 4]` → False (sorted, but 2 appears 3 times)

Here's my implementation:

```python
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    # Handle empty list or single element
    if len(lst) <= 1:
        return True
    
    # Check if list is sorted in ascending order
    for i in range(1, len(lst)):
        if lst[i] < lst[i-1]:
            return False
    
    # Count occurrences of each number
    from collections import Counter
    counts = Counter(lst)
    
    # Check if any number appears more than twice
    for count in counts.values():
        if count > 2:
            return False
    
    return True
```

The solution works by:
1. First checking if the list is sorted in non-decreasing order
2. Then counting the frequency of each number using `Counter`
3. Returning `False` if any number appears more than twice
4. Returning `True` if both conditions are satisfied