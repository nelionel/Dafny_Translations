=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `greatest_common_divisor`.

**Python Test Code:**
```python


METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate(3, 7) == 1
    assert candidate(10, 15) == 5
    assert candidate(49, 14) == 7
    assert candidate(144, 60) == 12

```

**Dafny Solution Code (that these tests should test):**
```dafny
method greatest_common_divisor(a: int, b: int) returns (result: int)
  ensures result >= 0
  ensures (a == 0 && b == 0) ==> result == 0
  ensures (a != 0 || b != 0) ==> result > 0
  ensures var abs_a := if a >= 0 then a else -a;
          var abs_b := if b >= 0 then b else -b;
          (abs_a == 0 || abs_a % result == 0) && (abs_b == 0 || abs_b % result == 0)
{
  var abs_a := if a >= 0 then a else -a;
  var abs_b := if b >= 0 then b else -b;
  
  var x := abs_a;
  var y := abs_b;
  
  while y != 0
    invariant x >= 0 && y >= 0
    invariant var orig_abs_a := if a >= 0 then a else -a;
              var orig_abs_b := if b >= 0 then b else -b;
              // The GCD is preserved through the algorithm steps
              (orig_abs_a == 0 && orig_abs_b == 0) ==> (x == 0 && y == 0)
    decreases y
  {
    var temp := y;
    y := x % y;
    x := temp;
  }
  
  result := x;
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`greatest_common_divisor`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `greatest_common_divisor` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `greatest_common_divisor` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the task:

1. I need to look at the Python test assertions and convert them to Dafny test methods
2. The method to test is `greatest_common_divisor`
3. Looking at the Dafny solution, the method signature is:
   `method greatest_common_divisor(a: int, b: int) returns (result: int)`

The Python test code has these assertions:
- `assert candidate(3, 7) == 1`
- `assert candidate(10, 15) == 5`
- `assert candidate(49, 14) == 7`
- `assert candidate(144, 60) == 12`

So I need to create 4 test methods, each testing one of these cases.

For the dummy implementation, I need to create a method with the same signature that returns a default value (0 for int).

Let me write this out:

First, the dummy implementation:
```dafny
method greatest_common_divisor(a: int, b: int) returns (result: int)
{
    result := 0;
}
```

Then the test methods:
```dafny
method {:test} test_0()
{
    var result := greatest_common_divisor(3, 7);
    expect result == 1;
}

method {:test} test_1()
{
    var result := greatest_common_divisor(10, 15);
    expect result == 5;
}

method {:test} test_2()
{
    var result := greatest_common_divisor(49, 14);
    expect result == 7;
}

method {:test} test_3()
{
    var result := greatest_common_divisor(144, 60);
    expect result == 12;
}
```

--- RESPONSE ---
Looking at the Python tests and the Dafny solution, I need to:

1. **Analyze the method signature**: The Dafny method is `greatest_common_divisor(a: int, b: int) returns (result: int)`
2. **Create test methods** for each of the 4 assertions in the Python code

<dummy>
method greatest_common_divisor(a: int, b: int) returns (result: int)
{
    result := 0;
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := greatest_common_divisor(3, 7);
    expect result == 1;
}

method {:test} test_1()
{
    var result := greatest_common_divisor(10, 15);
    expect result == 5;
}

method {:test} test_2()
{
    var result := greatest_common_divisor(49, 14);
    expect result == 7;
}

method {:test} test_3()
{
    var result := greatest_common_divisor(144, 60);
    expect result == 12;
}
```

