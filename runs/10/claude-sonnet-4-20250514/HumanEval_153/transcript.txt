======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Calculate the strength of each extension using the formula: CAP - SM (uppercase letters - lowercase letters)
2. Find the extension with the highest strength
3. If there's a tie, choose the first one in the list
4. Return the result in the format "ClassName.StrongestExtensionName"

Let me trace through the example:
- 'SErviNGSliCes': CAP = 6 (S, E, N, G, S, C), SM = 7 (r, v, i, l, i, e, s), strength = 6 - 7 = -1
- 'Cheese': CAP = 1 (C), SM = 5 (h, e, e, s, e), strength = 1 - 5 = -4
- 'StuFfed': CAP = 2 (S, F), SM = 4 (t, u, f, e, d), strength = 2 - 4 = -2

So 'SErviNGSliCes' has the highest strength (-1).

```python
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
    
    strongest_extension = extensions[0]
    max_strength = float('-inf')
    
    for extension in extensions:
        # Count uppercase and lowercase letters
        cap = sum(1 for char in extension if char.isupper())
        sm = sum(1 for char in extension if char.islower())
        
        # Calculate strength
        strength = cap - sm
        
        # Update strongest extension if current strength is higher
        if strength > max_strength:
            max_strength = strength
            strongest_extension = extension
    
    return f"{class_name}.{strongest_extension}"
```