=============== SYSTEM ===============
You are an expert in formal verification and Dafny specifications. Your task is to analyze whether Dafny method specifications properly describe the behavior of the corresponding Python function.

You will be given:
1. A Python function with its behavior
2. A Dafny method translation with specifications (requires, ensures clauses)

Your job is to determine if the Dafny specifications fully and accurately capture the Python function's behavior. If not, you should improve the specifications.

IMPORTANT: You must respond with EXACTLY one of these phrases:
- "THE SCRIPT HAS PROPER SPECS" - if the specifications correctly describe the function
- "THE SCRIPT HAD NOT A PROPER SPEC" - if the specifications need improvement

After this phrase, provide the complete Dafny code (either unchanged or with improved specifications).



=============== USER ===============
Please analyze whether the Dafny specifications properly describe the Python function behavior.

**Python Function:**
```python
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    # First check if the sides can form a valid triangle
    # Triangle inequality: sum of any two sides must be greater than the third side
    if a + b <= c or a + c <= b or b + c <= a:
        return False
    
    # Check if any side is non-positive
    if a <= 0 or b <= 0 or c <= 0:
        return False
    
    # Sort the sides to identify the longest side (hypotenuse)
    sides = sorted([a, b, c])
    
    # Apply Pythagorean theorem: a² + b² = c²
    # Where c is the longest side (hypotenuse)
    return sides[0]**2 + sides[1]**2 == sides[2]**2
```

**Current Dafny Code:**
```dafny
method right_angle_triangle(a: real, b: real, c: real) returns (result: bool)
    ensures result <==> (
        // Valid triangle conditions
        a > 0.0 && b > 0.0 && c > 0.0 &&
        a + b > c && a + c > b && b + c > a &&
        // Pythagorean theorem for some ordering of the sides
        (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a)
    )
{
    // First check if the sides can form a valid triangle
    // Triangle inequality: sum of any two sides must be greater than the third side
    if a + b <= c || a + c <= b || b + c <= a {
        return false;
    }
    
    // Check if any side is non-positive
    if a <= 0.0 || b <= 0.0 || c <= 0.0 {
        return false;
    }
    
    // Sort the sides to identify the longest side (hypotenuse)
    // Manual sorting of three values
    var side1, side2, side3: real;
    
    if a >= b && a >= c {
        side3 := a; // a is largest
        if b >= c {
            side1 := c;
            side2 := b;
        } else {
            side1 := b;
            side2 := c;
        }
    } else if b >= a && b >= c {
        side3 := b; // b is largest
        if a >= c {
            side1 := c;
            side2 := a;
        } else {
            side1 := a;
            side2 := c;
        }
    } else {
        side3 := c; // c is largest
        if a >= b {
            side1 := b;
            side2 := a;
        } else {
            side1 := a;
            side2 := b;
        }
    }
    
    // Apply Pythagorean theorem: side1² + side2² = side3²
    // Where side3 is the longest side (hypotenuse)
    return side1 * side1 + side2 * side2 == side3 * side3;
}
```

**Analysis Task:**
1. Compare the Python function's behavior with the Dafny specifications
2. Check if the `requires` clauses capture all preconditions
3. Check if the `ensures` clauses capture all postconditions and behavior
4. Verify that the specifications fully describe what the function does

**Response Format:**
Start with exactly one of these phrases:
- "THE SCRIPT HAS PROPER SPECS" (if specifications are adequate)
- "THE SCRIPT HAD NOT A PROPER SPEC" (if specifications need improvement)

Then provide the complete Dafny code. If improving specifications:
- Add missing `requires` clauses for preconditions
- Add missing `ensures` clauses for postconditions
- Ensure specifications capture the function's complete behavior
- Preserve the existing method implementation unchanged

 


=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the Python function and the Dafny specifications.

Python function behavior:
1. Returns True if the three sides form a right-angled triangle, False otherwise
2. First checks if sides can form a valid triangle using triangle inequality
3. Checks if any side is non-positive
4. Sorts the sides and applies Pythagorean theorem

The Python function returns False if:
- Any side is <= 0 
- Triangle inequality is violated (a + b <= c OR a + c <= b OR b + c <= a)

The Python function returns True if:
- All sides are > 0
- Triangle inequality is satisfied (a + b > c AND a + c > b AND b + c > a)
- Pythagorean theorem holds for some ordering

Now let me look at the Dafny specification:

```dafny
ensures result <==> (
    // Valid triangle conditions
    a > 0.0 && b > 0.0 && c > 0.0 &&
    a + b > c && a + c > b && b + c > a &&
    // Pythagorean theorem for some ordering of the sides
    (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a)
)
```

This ensures clause says:
- result is true if and only if:
  - All sides are positive AND
  - Triangle inequality holds AND  
  - Pythagorean theorem holds for some ordering

This matches the Python function behavior exactly:
- The Python function returns False if any side is <= 0, which matches a > 0.0 && b > 0.0 && c > 0.0
- The Python function returns False if triangle inequality is violated, which matches a + b > c && a + c > b && b + c > a
- The Python function returns True if Pythagorean theorem holds after sorting, which matches (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a)


I see the specification precisely captures the function's logic, with no additional preconditions needed. The ensures clause comprehensively defines the conditions for a right-angled triangle, matching the implementation's exact behavior.

--- RESPONSE ---
THE SCRIPT HAS PROPER SPECS

```dafny
method right_angle_triangle(a: real, b: real, c: real) returns (result: bool)
    ensures result <==> (
        // Valid triangle conditions
        a > 0.0 && b > 0.0 && c > 0.0 &&
        a + b > c && a + c > b && b + c > a &&
        // Pythagorean theorem for some ordering of the sides
        (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a)
    )
{
    // First check if the sides can form a valid triangle
    // Triangle inequality: sum of any two sides must be greater than the third side
    if a + b <= c || a + c <= b || b + c <= a {
        return false;
    }
    
    // Check if any side is non-positive
    if a <= 0.0 || b <= 0.0 || c <= 0.0 {
        return false;
    }
    
    // Sort the sides to identify the longest side (hypotenuse)
    // Manual sorting of three values
    var side1, side2, side3: real;
    
    if a >= b && a >= c {
        side3 := a; // a is largest
        if b >= c {
            side1 := c;
            side2 := b;
        } else {
            side1 := b;
            side2 := c;
        }
    } else if b >= a && b >= c {
        side3 := b; // b is largest
        if a >= c {
            side1 := c;
            side2 := a;
        } else {
            side1 := a;
            side2 := c;
        }
    } else {
        side3 := c; // c is largest
        if a >= b {
            side1 := b;
            side2 := a;
        } else {
            side1 := a;
            side2 := b;
        }
    }
    
    // Apply Pythagorean theorem: side1² + side2² = side3²
    // Where side3 is the longest side (hypotenuse)
    return side1 * side1 + side2 * side2 == side3 * side3;
}
```

