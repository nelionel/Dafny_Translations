======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''


======MODEL OUTPUT======
Looking at this problem, I need to determine if three given side lengths form a right-angled triangle. According to the Pythagorean theorem, a triangle is a right-angled triangle if the square of the longest side equals the sum of squares of the other two sides.

Here's my implementation:

```python
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    # First check if the sides can form a valid triangle
    # Triangle inequality: sum of any two sides must be greater than the third side
    if a + b <= c or a + c <= b or b + c <= a:
        return False
    
    # Check if any side is non-positive
    if a <= 0 or b <= 0 or c <= 0:
        return False
    
    # Sort the sides to identify the longest side (hypotenuse)
    sides = sorted([a, b, c])
    
    # Apply Pythagorean theorem: a² + b² = c²
    # Where c is the longest side (hypotenuse)
    return sides[0]**2 + sides[1]**2 == sides[2]**2
```

The function works by:

1. **Validation**: First checking if the given sides can form a valid triangle using the triangle inequality theorem and ensuring all sides are positive.

2. **Sorting**: Arranging the sides in ascending order so that the largest side (potential hypotenuse) is at the end.

3. **Pythagorean theorem**: Checking if the sum of squares of the two smaller sides equals the square of the largest side.

The examples work as expected:
- `right_angle_triangle(3, 4, 5)` returns `True` because 3² + 4² = 9 + 16 = 25 = 5²
- `right_angle_triangle(1, 2, 3)` returns `False` because 1² + 2² = 1 + 4 = 5 ≠ 9 = 3²