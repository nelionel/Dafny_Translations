======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Parse a string containing musical notes in ASCII format
2. Convert each note to its corresponding beat count
3. Return a list of integers representing the beats

From the legend:
- 'o' = whole note = 4 beats
- 'o|' = half note = 2 beats  
- '.|' = quarter note = 1 beat

I need to be careful about the parsing order since 'o|' contains 'o', so I should check for the longer patterns first.

```python
from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
    if not music_string.strip():
        return []
    
    # Split by spaces to get individual notes
    notes = music_string.split()
    
    # Map each note to its beat count
    note_to_beats = {
        'o': 4,    # whole note
        'o|': 2,   # half note  
        '.|': 1    # quarter note
    }
    
    result = []
    for note in notes:
        if note in note_to_beats:
            result.append(note_to_beats[note])
    
    return result
```

The solution works by:

1. First checking if the input string is empty or just whitespace
2. Splitting the input string by spaces to separate individual notes
3. Creating a mapping dictionary from note symbols to their beat counts
4. Iterating through each note and looking up its beat count in the mapping
5. Returning the list of beat counts

This approach handles the parsing correctly since we're splitting by spaces first, so we don't have to worry about substring matching issues (like 'o' being contained in 'o|').