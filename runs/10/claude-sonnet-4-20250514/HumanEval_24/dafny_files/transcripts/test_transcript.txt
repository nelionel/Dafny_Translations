=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `largest_divisor`.

**Python Test Code:**
```python


METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate(3) == 1
    assert candidate(7) == 1
    assert candidate(10) == 5
    assert candidate(100) == 50
    assert candidate(49) == 7

```

**Dafny Solution Code (that these tests should test):**
```dafny
method largest_divisor(n: int) returns (result: int)
    requires n > 1
    ensures result < n
    ensures n % result == 0
    ensures forall k :: result < k < n ==> n % k != 0
{
    var i := n / 2;
    while i > 0
        invariant 0 <= i <= n / 2
        invariant forall k :: i < k <= n / 2 ==> n % k != 0
        decreases i
    {
        if n % i == 0 {
            return i;
        }
        i := i - 1;
    }
    
    return 1;
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`largest_divisor`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `largest_divisor` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `largest_divisor` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the Python test code and the Dafny solution:

1. The Python test code has these assertions:
   - `assert candidate(3) == 1`
   - `assert candidate(7) == 1`
   - `assert candidate(10) == 5`
   - `assert candidate(100) == 50`
   - `assert candidate(49) == 7`

2. The Dafny solution has a method named `largest_divisor` with this signature:
   ```dafny
   method largest_divisor(n: int) returns (result: int)
   ```

So I need to:
1. Create a dummy implementation of `largest_divisor` that has the same signature and returns a default int value (0).
2. Create 5 test methods (`test_0` through `test_4`) that test each assertion.

For the dummy implementation, since the method returns an int, I'll return 0 as the default value.

For the tests, each one will call `largest_divisor` with the input parameter and check if the result matches the expected value using `expect`.

--- RESPONSE ---
Looking at the Python tests and Dafny solution:

1. **Method to test:** `largest_divisor` with signature `method largest_divisor(n: int) returns (result: int)`
2. **Tests:** 5 assertions testing different inputs and expected outputs

<dummy>
method largest_divisor(n: int) returns (result: int)
{
    return 0;
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := largest_divisor(3);
    expect result == 1;
}

method {:test} test_1()
{
    var result := largest_divisor(7);
    expect result == 1;
}

method {:test} test_2()
{
    var result := largest_divisor(10);
    expect result == 5;
}

method {:test} test_3()
{
    var result := largest_divisor(100);
    expect result == 50;
}

method {:test} test_4()
{
    var result := largest_divisor(49);
    expect result == 7;
}
```

