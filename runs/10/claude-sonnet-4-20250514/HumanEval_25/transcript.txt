======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """


======MODEL OUTPUT======
Looking at this problem, I need to find all prime factors of a given integer and return them in a list where each factor appears as many times as it divides the number.

Here's my approach:
1. Start with the smallest prime (2) and divide the number by it as many times as possible
2. Move to the next potential prime and repeat
3. Continue until the number becomes 1 or we've checked all possible factors

```python
from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
    factors = []
    
    # Handle the case where n is 1 or less
    if n <= 1:
        return factors
    
    # Check for factor 2
    while n % 2 == 0:
        factors.append(2)
        n //= 2
    
    # Check for odd factors starting from 3
    factor = 3
    while factor * factor <= n:
        while n % factor == 0:
            factors.append(factor)
            n //= factor
        factor += 2
    
    # If n is still greater than 1, then it's a prime factor
    if n > 1:
        factors.append(n)
    
    return factors
```

The algorithm works as follows:

1. **Handle edge cases**: If n ≤ 1, return an empty list
2. **Factor out 2s**: Divide by 2 repeatedly while possible, adding 2 to the factors list each time
3. **Check odd factors**: Starting from 3, check each odd number up to √n
4. **Remaining prime**: If n > 1 after all divisions, n itself is a prime factor

Time complexity: O(√n) in the worst case
Space complexity: O(log n) for the factors list

The function correctly handles all the test cases:
- `factorize(8)` returns `[2, 2, 2]` (8 = 2³)
- `factorize(25)` returns `[5, 5]` (25 = 5²)
- `factorize(70)` returns `[2, 5, 7]` (70 = 2 × 5 × 7)