=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `remove_duplicates`.

**Python Test Code:**
```python


METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]

```

**Dafny Solution Code (that these tests should test):**
```dafny
method remove_duplicates(numbers: seq<int>) returns (result: seq<int>)
    ensures forall x :: x in result ==> count_occurrences(numbers, x) == 1
    ensures forall x :: x in numbers && count_occurrences(numbers, x) == 1 ==> x in result
    ensures |result| <= |numbers|
{
    result := [];
    var i := 0;
    
    while i < |numbers|
        invariant 0 <= i <= |numbers|
        invariant forall x :: x in result ==> count_occurrences(numbers, x) == 1
        invariant forall j :: 0 <= j < i && count_occurrences(numbers, numbers[j]) == 1 ==> numbers[j] in result
        invariant forall x :: x in result ==> x in numbers[0..i]
    {
        if count_occurrences(numbers, numbers[i]) == 1 {
            result := result + [numbers[i]];
        }
        i := i + 1;
    }
}

function count_occurrences(s: seq<int>, target: int): int
    decreases s
{
    if |s| == 0 then 0
    else if s[0] == target then 1 + count_occurrences(s[1..], target)
    else count_occurrences(s[1..], target)
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`remove_duplicates`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `remove_duplicates` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `remove_duplicates` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the provided Python test code and Dafny solution:

1. The method to test is named `remove_duplicates`
2. From the Dafny solution, I can see:
   - It takes a parameter `numbers: seq<int>`
   - It returns `result: seq<int>`
   - The method signature is: `method remove_duplicates(numbers: seq<int>) returns (result: seq<int>)`

3. The Python tests are:
   - `assert candidate([]) == []` - empty list should return empty list
   - `assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]` - list with no duplicates should return same list
   - `assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]` - list with duplicates should return only elements that appear exactly once

4. For the dummy implementation, I need to create a method with the same signature that returns a default value. For seq<int>, the default would be an empty sequence [].

5. For the tests, I need to convert the Python lists to Dafny sequences and create test methods that call `remove_duplicates` and use `expect` to check the results.

Let me also note that the Dafny solution also includes a helper function `count_occurrences`, so I should include a dummy version of that too for compilation.

--- RESPONSE ---
Looking at the Dafny solution and Python tests, I need to create test methods for the `remove_duplicates` method that removes elements appearing more than once in a sequence.

<dummy>
method remove_duplicates(numbers: seq<int>) returns (result: seq<int>)
{
    result := [];
}

function count_occurrences(s: seq<int>, target: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := remove_duplicates([]);
    expect result == [];
}

method {:test} test_1()
{
    var result := remove_duplicates([1, 2, 3, 4]);
    expect result == [1, 2, 3, 4];
}

method {:test} test_2()
{
    var result := remove_duplicates([1, 2, 3, 2, 4, 3, 5]);
    expect result == [1, 4, 5];
}
```

