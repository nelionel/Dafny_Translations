=============== SYSTEM ===============
You are an expert in formal verification and Dafny specifications. Your task is to analyze whether Dafny method specifications properly describe the behavior of the corresponding Python function.

You will be given:
1. A Python function with its behavior
2. A Dafny method translation with specifications (requires, ensures clauses)

Your job is to determine if the Dafny specifications fully and accurately capture the Python function's behavior. If not, you should improve the specifications.

IMPORTANT: You must respond with EXACTLY one of these phrases:
- "THE SCRIPT HAS PROPER SPECS" - if the specifications correctly describe the function
- "THE SCRIPT HAD NOT A PROPER SPEC" - if the specifications need improvement

After this phrase, provide the complete Dafny code (either unchanged or with improved specifications).



=============== USER ===============
Please analyze whether the Dafny specifications properly describe the Python function behavior.

**Python Function:**
```python
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    # Numbers less than 2 are not prime
    if n < 2:
        return False
    
    # 2 is the only even prime number
    if n == 2:
        return True
    
    # All other even numbers are not prime
    if n % 2 == 0:
        return False
    
    # Check odd divisors from 3 up to sqrt(n)
    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2
    
    return True
```

**Current Dafny Code:**
```dafny
method is_prime(n: int) returns (result: bool)
    ensures result == (n >= 2 && forall k :: 2 <= k < n ==> n % k != 0)
{
    // Numbers less than 2 are not prime
    if n < 2 {
        return false;
    }
    
    // 2 is the only even prime number
    if n == 2 {
        return true;
    }
    
    // All other even numbers are not prime
    if n % 2 == 0 {
        return false;
    }
    
    // Check odd divisors from 3 up to sqrt(n)
    var i := 3;
    while i * i <= n
        invariant i >= 3 && i % 2 == 1
        invariant forall k :: 3 <= k < i && k % 2 == 1 ==> n % k != 0
        decreases n - i * i
    {
        if n % i == 0 {
            return false;
        }
        i := i + 2;
    }
    
    return true;
}
```

**Analysis Task:**
1. Compare the Python function's behavior with the Dafny specifications
2. Check if the `requires` clauses capture all preconditions
3. Check if the `ensures` clauses capture all postconditions and behavior
4. Verify that the specifications fully describe what the function does

**Response Format:**
Start with exactly one of these phrases:
- "THE SCRIPT HAS PROPER SPECS" (if specifications are adequate)
- "THE SCRIPT HAD NOT A PROPER SPEC" (if specifications need improvement)

Then provide the complete Dafny code. If improving specifications:
- Add missing `requires` clauses for preconditions
- Add missing `ensures` clauses for postconditions
- Ensure specifications capture the function's complete behavior
- Preserve the existing method implementation unchanged

 


=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the Python function and the Dafny specifications carefully.

The Python function `is_prime(n)`:
1. Returns `False` if `n < 2`
2. Returns `True` if `n == 2`
3. Returns `False` if `n > 2` and `n % 2 == 0` (even numbers > 2)
4. For odd numbers >= 3, checks divisibility by odd numbers from 3 up to sqrt(n)
5. Returns `True` if no divisors are found, `False` otherwise

The current Dafny specification:
```dafny
ensures result == (n >= 2 && forall k :: 2 <= k < n ==> n % k != 0)
```

Let me check if this specification is correct:

The mathematical definition of a prime number is: a natural number greater than 1 that has no positive divisors other than 1 and itself.

So a number `n` is prime if and only if:
- `n >= 2` (greater than 1)
- For all `k` where `2 <= k < n`, we have `n % k != 0` (no divisors between 2 and n-1)

This matches exactly what the Dafny ensures clause says: `result == (n >= 2 && forall k :: 2 <= k < n ==> n % k != 0)`

Let me verify this against the Python function behavior:
- If `n < 2`: The function returns `False`. The specification would be `False == (false && ...)` which is `False == false`, which is correct.
- If `n == 2`: The function returns `True`. The specification would be `True == (true && forall k :: 2 <= k < 2 ==> ...)`. Since there are no `k` where `2 <= k < 2`, the forall is vacuously true, so this is `True == (true && true)` which is `True == true`, which is correct.


- If `n > 2` and `n` has a divisor: The function returns `False`. The specification would find that there exists some `k` where `2 <= k < n` and `n % k == 0`, making the forall false, so `False == (true && false)` which is `False == false`, which is correct.
- If `n > 2` and `n` has no divisors: The function returns `True`. The specification would have `forall k :: 2 <= k < n ==> n % k != 0` be true, so `True == (true && true)` which is `True == true`, which is correct.

I'll examine the specification's logical consistency across different input scenarios. The Dafny ensures clause precisely captures the prime number definition, covering edge cases and general conditions. Each possible input state aligns perfectly with the expected boolean result, demonstrating the specification's robustness.

The method handles integer inputs comprehensively, with loop invariants strategically designed to validate primality efficiently. Odd number constraints and divisibility checks create a mathematically sound verification approach. Termination is guaranteed through the decreasing measure of `n - i * i`, ensuring the algorithm converges systematically.

--- RESPONSE ---
THE SCRIPT HAS PROPER SPECS

```dafny
method is_prime(n: int) returns (result: bool)
    ensures result == (n >= 2 && forall k :: 2 <= k < n ==> n % k != 0)
{
    // Numbers less than 2 are not prime
    if n < 2 {
        return false;
    }
    
    // 2 is the only even prime number
    if n == 2 {
        return true;
    }
    
    // All other even numbers are not prime
    if n % 2 == 0 {
        return false;
    }
    
    // Check odd divisors from 3 up to sqrt(n)
    var i := 3;
    while i * i <= n
        invariant i >= 3 && i % 2 == 1
        invariant forall k :: 3 <= k < i && k % 2 == 1 ==> n % k != 0
        decreases n - i * i
    {
        if n % i == 0 {
            return false;
        }
        i := i + 2;
    }
    
    return true;
}
```

