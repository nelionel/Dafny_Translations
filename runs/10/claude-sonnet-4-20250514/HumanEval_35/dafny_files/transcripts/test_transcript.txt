=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `max_element`.

**Python Test Code:**
```python


METADATA = {}


def check(candidate):
    assert candidate([1, 2, 3]) == 3
    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124

```

**Dafny Solution Code (that these tests should test):**
```dafny
method max_element(l: seq<int>) returns (max_val: int)
  requires |l| > 0
  ensures max_val in l
  ensures forall i :: 0 <= i < |l| ==> l[i] <= max_val
{
  max_val := l[0];
  var idx := 1;
  
  while idx < |l|
    invariant 1 <= idx <= |l|
    invariant max_val in l[0..idx]
    invariant forall j :: 0 <= j < idx ==> l[j] <= max_val
  {
    if l[idx] > max_val {
      max_val := l[idx];
    }
    idx := idx + 1;
  }
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`max_element`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `max_element` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `max_element` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the provided information:

1. The method to test is named `max_element`
2. From the Dafny solution code, I can see that `max_element` has the signature:
   ```dafny
   method max_element(l: seq<int>) returns (max_val: int)
   ```

3. The Python tests are:
   - `assert candidate([1, 2, 3]) == 3`
   - `assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124`

So I need to:
1. Create a dummy implementation of `max_element` that returns an int (I'll use 0 as default)
2. Create test methods that call `max_element` with the test inputs and expect the correct outputs

Let me write this:

For the dummy:
```dafny
method max_element(l: seq<int>) returns (max_val: int)
{
    max_val := 0;
}
```

For the tests:
- test_0: Call `max_element([1, 2, 3])` and expect result == 3
- test_1: Call `max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])` and expect result == 124

--- RESPONSE ---
<dummy>
method max_element(l: seq<int>) returns (max_val: int)
{
    max_val := 0;
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := max_element([1, 2, 3]);
    expect result == 3;
}

method {:test} test_1()
{
    var result := max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]);
    expect result == 124;
}
```

