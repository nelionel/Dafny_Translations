=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `fizz_buzz`.

**Python Test Code:**
```python


METADATA = {}


def check(candidate):
    assert candidate(50) == 0
    assert candidate(78) == 2
    assert candidate(79) == 3
    assert candidate(100) == 3
    assert candidate(200) == 6
    assert candidate(4000) == 192
    assert candidate(10000) == 639
    assert candidate(100000) == 8026


```

**Dafny Solution Code (that these tests should test):**
```dafny
function CountSevens(num: int): int
  requires num >= 0
  decreases num
{
  if num == 0 then 0
  else (if num % 10 == 7 then 1 else 0) + CountSevens(num / 10)
}

method fizz_buzz(n: int) returns (count: int)
  requires n >= 1
  ensures count >= 0
{
  count := 0;
  var i := 1;
  while i < n
    invariant 1 <= i <= n
    invariant count >= 0
    decreases n - i
  {
    if i % 11 == 0 || i % 13 == 0 {
      count := count + CountSevens(i);
    }
    i := i + 1;
  }
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`fizz_buzz`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `fizz_buzz` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `fizz_buzz` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the tests and solution:

1. The Python tests are calling `candidate(50)`, `candidate(78)`, etc., which corresponds to the `fizz_buzz` method in Dafny.

2. The Dafny method signature is:
   ```dafny
   method fizz_buzz(n: int) returns (count: int)
   ```

3. The tests are:
   - `candidate(50) == 0`
   - `candidate(78) == 2`
   - `candidate(79) == 3`
   - `candidate(100) == 3`
   - `candidate(200) == 6`
   - `candidate(4000) == 192`
   - `candidate(10000) == 639`
   - `candidate(100000) == 8026`

4. I need to create a dummy implementation and then test methods.

For the dummy implementation:
- The method returns an int, so I'll return 0.
- I need to match the signature exactly: `method fizz_buzz(n: int) returns (count: int)`

For the tests:
- Each test will call `fizz_buzz` with the given input and expect the given output.
- I need to use `expect` statements.

--- RESPONSE ---
<dummy>
method fizz_buzz(n: int) returns (count: int)
{
    count := 0;
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := fizz_buzz(50);
    expect result == 0;
}

method {:test} test_1()
{
    var result := fizz_buzz(78);
    expect result == 2;
}

method {:test} test_2()
{
    var result := fizz_buzz(79);
    expect result == 3;
}

method {:test} test_3()
{
    var result := fizz_buzz(100);
    expect result == 3;
}

method {:test} test_4()
{
    var result := fizz_buzz(200);
    expect result == 6;
}

method {:test} test_5()
{
    var result := fizz_buzz(4000);
    expect result == 192;
}

method {:test} test_6()
{
    var result := fizz_buzz(10000);
    expect result == 639;
}

method {:test} test_7()
{
    var result := fizz_buzz(100000);
    expect result == 8026;
}
```

