======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Find all integers less than `n` that are divisible by 11 or 13
2. Count how many times the digit 7 appears in those numbers
3. Return the total count

Let me trace through the examples:
- `fizz_buzz(50)`: Numbers divisible by 11 or 13 less than 50 are: 11, 13, 22, 26, 33, 39, 44. None contain digit 7, so return 0.
- `fizz_buzz(78)`: Additional numbers include 55, 65, 66, 77. The number 77 contains two 7s, so return 2.
- `fizz_buzz(79)`: Adds 77 (already counted) and nothing new, but we also need to check if there are other numbers. Actually, let me recheck: we have 77 (two 7s) and possibly 77 appears in our range. Wait, let me recalculate more carefully.

```python
def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
    count = 0
    
    for i in range(1, n):
        # Check if the number is divisible by 11 or 13
        if i % 11 == 0 or i % 13 == 0:
            # Count occurrences of digit 7 in this number
            count += str(i).count('7')
    
    return count
```

Let me verify with the examples:

- `fizz_buzz(50)`: Numbers divisible by 11 or 13 less than 50: 11, 13, 22, 26, 33, 39, 44. None contain '7', so count = 0. ✓

- `fizz_buzz(78)`: Numbers divisible by 11 or 13 less than 78: 11, 13, 22, 26, 33, 39, 44, 55, 65, 66, 77. Only 77 contains '7' (appears twice), so count = 2. ✓

- `fizz_buzz(79)`: Same as above, but we also need to check 78. Since 78 % 11 ≠ 0 and 78 % 13 = 0, we include 78. But 78 contains one '7', so total count = 2 + 1 = 3. ✓