======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Generate Fibonacci numbers
2. Check if each Fibonacci number is prime
3. Return the n-th Fibonacci number that is also prime

Let me implement this step by step:

```python
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    def is_prime(num):
        """Check if a number is prime"""
        if num < 2:
            return False
        if num == 2:
            return True
        if num % 2 == 0:
            return False
        
        # Check odd divisors up to sqrt(num)
        i = 3
        while i * i <= num:
            if num % i == 0:
                return False
            i += 2
        return True
    
    def fibonacci_generator():
        """Generate Fibonacci numbers"""
        a, b = 0, 1
        while True:
            yield a
            a, b = b, a + b
    
    count = 0
    fib_gen = fibonacci_generator()
    
    while count < n:
        fib_num = next(fib_gen)
        if is_prime(fib_num):
            count += 1
            if count == n:
                return fib_num
```

The solution works as follows:

1. **`is_prime(num)`**: A helper function that efficiently checks if a number is prime by:
   - Handling edge cases (numbers less than 2)
   - Checking divisibility by 2
   - Testing odd divisors up to the square root of the number

2. **`fibonacci_generator()`**: A generator that yields Fibonacci numbers in sequence starting from 0, 1, 1, 2, 3, 5, 8, 13, ...

3. **Main logic**: 
   - Iterates through Fibonacci numbers
   - Checks if each is prime
   - Counts the prime Fibonacci numbers
   - Returns the n-th prime Fibonacci number

The sequence of prime Fibonacci numbers is: 2, 3, 5, 13, 89, 233, 1597, ...