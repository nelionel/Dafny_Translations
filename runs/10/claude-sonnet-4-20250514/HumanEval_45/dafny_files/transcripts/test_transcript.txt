=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `triangle_area`.

**Python Test Code:**
```python


METADATA = {}


def check(candidate):
    assert candidate(5, 3) == 7.5
    assert candidate(2, 2) == 2.0
    assert candidate(10, 8) == 40.0


```

**Dafny Solution Code (that these tests should test):**
```dafny
method triangle_area(a: real, h: real) returns (area: real)
  requires a >= 0.0
  requires h >= 0.0
  ensures area >= 0.0
  ensures area == (a * h) / 2.0
{
    area := (a * h) / 2.0;
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`triangle_area`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `triangle_area` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `triangle_area` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Looking at the task:

1. The method to test is `triangle_area` 
2. From the Dafny solution code, I can see the signature is:
   ```dafny
   method triangle_area(a: real, h: real) returns (area: real)
   ```

3. The Python tests are:
   - `assert candidate(5, 3) == 7.5`
   - `assert candidate(2, 2) == 2.0`
   - `assert candidate(10, 8) == 40.0`

4. I need to create a dummy implementation first that just returns a default value (0.0 for real)

5. Then I need to translate each assert into a Dafny test method using {:test} attribute, calling the method and using expect to check the result.

Let me write this out:

For the dummy, I need the same signature as the real method:
```dafny
method triangle_area(a: real, h: real) returns (area: real)
{
    area := 0.0;
}
```

For the tests:
- test_0: triangle_area(5, 3) should return 7.5
- test_1: triangle_area(2, 2) should return 2.0  
- test_2: triangle_area(10, 8) should return 40.0

Each test method should call triangle_area, get the result, and use expect to check it matches the expected value.

--- RESPONSE ---
Looking at the Dafny solution, I can see the method signature and need to create tests for the `triangle_area` method.

<dummy>
method triangle_area(a: real, h: real) returns (area: real)
{
    area := 0.0;
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := triangle_area(5.0, 3.0);
    expect result == 7.5;
}

method {:test} test_1()
{
    var result := triangle_area(2.0, 2.0);
    expect result == 2.0;
}

method {:test} test_2()
{
    var result := triangle_area(10.0, 8.0);
    expect result == 40.0;
}
```

