=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `fib4`.

**Python Test Code:**
```python


METADATA = {}


def check(candidate):
    assert candidate(5) == 4
    assert candidate(8) == 28
    assert candidate(10) == 104
    assert candidate(12) == 386


```

**Dafny Solution Code (that these tests should test):**
```dafny
method fib4(n: int) returns (result: int)
  requires n >= 0
  ensures result == fib4_spec(n)
{
  if n == 0 {
    return 0;
  } else if n == 1 {
    return 0;
  } else if n == 2 {
    return 2;
  } else if n == 3 {
    return 0;
  }
  
  var a, b, c, d := 0, 0, 2, 0;  // fib4(0), fib4(1), fib4(2), fib4(3)
  var i := 4;
  
  while i <= n
    invariant 4 <= i <= n + 1
    invariant a == fib4_spec(i-4)
    invariant b == fib4_spec(i-3)
    invariant c == fib4_spec(i-2)
    invariant d == fib4_spec(i-1)
    decreases n + 1 - i
  {
    var next_val := a + b + c + d;
    a, b, c, d := b, c, d, next_val;
    i := i + 1;
  }
  
  return d;
}

function fib4_spec(n: int): int
  requires n >= 0
  decreases n
{
  if n == 0 then 0
  else if n == 1 then 0
  else if n == 2 then 2
  else if n == 3 then 0
  else fib4_spec(n-1) + fib4_spec(n-2) + fib4_spec(n-3) + fib4_spec(n-4)
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`fib4`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `fib4` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `fib4` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Looking at the Python test code, I can see the following assertions:
- `assert candidate(5) == 4`
- `assert candidate(8) == 28`
- `assert candidate(10) == 104`
- `assert candidate(12) == 386`

The method being tested is `fib4` based on the provided Dafny solution code.

From the Dafny solution, I can see the method signature is:
`method fib4(n: int) returns (result: int)`

It has a precondition `requires n >= 0` and postcondition `ensures result == fib4_spec(n)`.

For the dummy implementation, I need to create a minimal version that has the same signature and returns a default value (0 for int).

For the tests, I need to:
1. Create test methods with `{:test}` attribute
2. Call `fib4` with the given inputs
3. Use `expect` to check the results match expected values

Let me translate each assertion:
1. `candidate(5) == 4` → call `fib4(5)` and expect result to be 4
2. `candidate(8) == 28` → call `fib4(8)` and expect result to be 28
3. `candidate(10) == 104` → call `fib4(10)` and expect result to be 104
4. `candidate(12) == 386` → call `fib4(12)` and expect result to be 386

--- RESPONSE ---
Looking at the Python tests and the Dafny solution, I can see the method being tested is `fib4` with signature `method fib4(n: int) returns (result: int)`.

<dummy>
method fib4(n: int) returns (result: int)
  requires n >= 0
{
  return 0;
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := fib4(5);
    expect result == 4;
}

method {:test} test_1()
{
    var result := fib4(8);
    expect result == 28;
}

method {:test} test_2()
{
    var result := fib4(10);
    expect result == 104;
}

method {:test} test_3()
{
    var result := fib4(12);
    expect result == 386;
}
```

