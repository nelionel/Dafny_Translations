======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """


======MODEL OUTPUT======
Looking at this problem, I need to implement the Fib4 sequence efficiently without recursion. The sequence is defined with base cases for n=0,1,2,3 and then each subsequent term is the sum of the previous 4 terms.

Since we shouldn't use recursion, I'll use an iterative approach with a sliding window to keep track of the last 4 values.

```python
def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
    # Base cases
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    
    # For n >= 4, use iterative approach
    # Keep track of the last 4 values
    a, b, c, d = 0, 0, 2, 0  # fib4(0), fib4(1), fib4(2), fib4(3)
    
    # Compute fib4(4) through fib4(n)
    for i in range(4, n + 1):
        next_val = a + b + c + d
        # Shift the window: move everything one position left
        a, b, c, d = b, c, d, next_val
    
    return d
```

The algorithm works as follows:

1. **Base cases**: Handle n=0,1,2,3 directly with their defined values
2. **Iterative computation**: For nâ‰¥4, maintain a sliding window of the last 4 computed values
3. **Window sliding**: In each iteration, compute the next value as the sum of the current 4 values, then shift the window by moving each value one position to the left and placing the new value at the rightmost position

Time complexity: O(n)
Space complexity: O(1)

This approach is efficient because it only keeps track of the necessary 4 previous values at any time, rather than storing all computed values or using expensive recursive calls.