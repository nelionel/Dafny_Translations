=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `below_threshold`.

**Python Test Code:**
```python


METADATA = {}


def check(candidate):
    assert candidate([1, 2, 4, 10], 100)
    assert not candidate([1, 20, 4, 10], 5)
    assert candidate([1, 20, 4, 10], 21)
    assert candidate([1, 20, 4, 10], 22)
    assert candidate([1, 8, 4, 10], 11)
    assert not candidate([1, 8, 4, 10], 10)


```

**Dafny Solution Code (that these tests should test):**
```dafny
method below_threshold(l: seq<int>, t: int) returns (result: bool)
  ensures result == forall i :: 0 <= i < |l| ==> l[i] < t
{
  var index := 0;
  
  while index < |l|
    invariant 0 <= index <= |l|
    invariant forall j :: 0 <= j < index ==> l[j] < t
    decreases |l| - index
  {
    if l[index] >= t {
      return false;
    }
    index := index + 1;
  }
  
  return true;
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`below_threshold`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `below_threshold` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `below_threshold` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the provided Python tests and Dafny solution:

1. The method is named `below_threshold`
2. From the solution, the signature is: `method below_threshold(l: seq<int>, t: int) returns (result: bool)`
3. The method returns true if all elements in the sequence are below the threshold `t`, false otherwise.

Now let me look at the Python tests:
- `assert candidate([1, 2, 4, 10], 100)` - expects True (all elements < 100)
- `assert not candidate([1, 20, 4, 10], 5)` - expects False (20 >= 5)
- `assert candidate([1, 20, 4, 10], 21)` - expects True (all elements < 21)
- `assert candidate([1, 20, 4, 10], 22)` - expects True (all elements < 22)
- `assert candidate([1, 8, 4, 10], 11)` - expects True (all elements < 11)
- `assert not candidate([1, 8, 4, 10], 10)` - expects False (10 >= 10)

For the dummy implementation, I need to create a method with the same signature that returns false by default.

For the tests, I need to:
1. Call below_threshold with the given parameters
2. Use expect to check the result matches the expected value

--- RESPONSE ---
<dummy>
method below_threshold(l: seq<int>, t: int) returns (result: bool)
{
    result := false;
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := below_threshold([1, 2, 4, 10], 100);
    expect result == true;
}

method {:test} test_1()
{
    var result := below_threshold([1, 20, 4, 10], 5);
    expect result == false;
}

method {:test} test_2()
{
    var result := below_threshold([1, 20, 4, 10], 21);
    expect result == true;
}

method {:test} test_3()
{
    var result := below_threshold([1, 20, 4, 10], 22);
    expect result == true;
}

method {:test} test_4()
{
    var result := below_threshold([1, 8, 4, 10], 11);
    expect result == true;
}

method {:test} test_5()
{
    var result := below_threshold([1, 8, 4, 10], 10);
    expect result == false;
}
```

