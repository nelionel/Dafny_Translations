=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `largest_prime_factor`.

**Python Test Code:**
```python


METADATA = {}


def check(candidate):
    assert candidate(15) == 5
    assert candidate(27) == 3
    assert candidate(63) == 7
    assert candidate(330) == 11
    assert candidate(13195) == 29


```

**Dafny Solution Code (that these tests should test):**
```dafny
method largest_prime_factor(n: int) returns (result: int)
  requires n > 1
  ensures result >= 1
{
  var largest_factor := 1;
  var current_n := n;
  
  // Check for factor 2
  while current_n % 2 == 0
    invariant current_n >= 1
    invariant largest_factor >= 1
    decreases current_n
  {
    largest_factor := 2;
    current_n := current_n / 2;
  }
  
  // Check for odd factors starting from 3
  var factor := 3;
  while factor * factor <= current_n
    invariant factor >= 3
    invariant factor % 2 == 1
    invariant current_n >= 1
    invariant largest_factor >= 1
    decreases current_n
  {
    while current_n % factor == 0
      invariant current_n >= 1
      invariant factor >= 3
      invariant largest_factor >= 1
      decreases current_n
    {
      largest_factor := factor;
      current_n := current_n / factor;
    }
    factor := factor + 2;
  }
  
  // If current_n is still greater than 1, then it's a prime factor
  if current_n > 1 {
    largest_factor := current_n;
  }
  
  result := largest_factor;
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`largest_prime_factor`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `largest_prime_factor` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `largest_prime_factor` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Let me analyze the task:

1. The method to test is `largest_prime_factor` 
2. From the Dafny solution code, I can see the signature is:
   `method largest_prime_factor(n: int) returns (result: int)`
   - It takes an int parameter `n`
   - It returns an int `result`
   - It has a precondition `requires n > 1`
   - It has a postcondition `ensures result >= 1`

3. The Python tests are:
   - `assert candidate(15) == 5`
   - `assert candidate(27) == 3`
   - `assert candidate(63) == 7`
   - `assert candidate(330) == 11`
   - `assert candidate(13195) == 29`

So I need to:
1. Create a dummy implementation with the same signature that returns a default int (0)
2. Create 5 test methods that call `largest_prime_factor` with the test inputs and expect the correct outputs

For the dummy implementation, I need to match the signature exactly:
`method largest_prime_factor(n: int) returns (result: int)`

And since it's a dummy, I'll just return 0.

For the tests, each one should:
- Call `largest_prime_factor` with the input
- Use `expect` to check the result matches the expected value

Let me write this out:

--- RESPONSE ---
Looking at the Dafny solution code, I can see the method signature is `method largest_prime_factor(n: int) returns (result: int)`.

<dummy>
method largest_prime_factor(n: int) returns (result: int)
{
    result := 0;
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := largest_prime_factor(15);
    expect result == 5;
}

method {:test} test_1()
{
    var result := largest_prime_factor(27);
    expect result == 3;
}

method {:test} test_2()
{
    var result := largest_prime_factor(63);
    expect result == 7;
}

method {:test} test_3()
{
    var result := largest_prime_factor(330);
    expect result == 11;
}

method {:test} test_4()
{
    var result := largest_prime_factor(13195);
    expect result == 29;
}
```

