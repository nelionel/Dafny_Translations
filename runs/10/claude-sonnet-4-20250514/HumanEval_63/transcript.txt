======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """


======MODEL OUTPUT======
Looking at this problem, I need to implement the FibFib sequence which follows the recurrence relation:
- fibfib(0) = 0
- fibfib(1) = 0  
- fibfib(2) = 1
- fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n > 2

To make this efficient, I'll use dynamic programming with memoization to avoid redundant calculations.

```python
def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
    # Handle base cases
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    
    # Use dynamic programming for efficiency
    # Keep track of the last three values
    a, b, c = 0, 0, 1  # fibfib(0), fibfib(1), fibfib(2)
    
    # Compute iteratively from 3 to n
    for i in range(3, n + 1):
        next_val = a + b + c
        a, b, c = b, c, next_val
    
    return c
```

The algorithm works as follows:
1. Handle the base cases directly (n = 0, 1, 2)
2. For n > 2, use an iterative approach keeping track of only the last three values
3. At each step, compute the next value as the sum of the previous three values
4. Update the three variables to slide the window forward

This approach has O(n) time complexity and O(1) space complexity, making it very efficient even for large values of n.