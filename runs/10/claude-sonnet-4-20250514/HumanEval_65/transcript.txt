======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Convert the integer to a string to work with individual digits
2. Handle the case where shift is greater than the number of digits (return reversed digits)
3. Perform a circular right shift by the specified amount
4. Return the result as a string

Let me trace through the examples:
- `circular_shift(12, 1)`: "12" shifted right by 1 → "21" 
- `circular_shift(12, 2)`: "12" shifted right by 2 → back to "12" (full rotation)

```python
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    # Convert to string to work with digits
    digits = str(abs(x))  # Use abs to handle negative numbers
    n = len(digits)
    
    # If shift is greater than number of digits, return reversed digits
    if shift > n:
        return digits[::-1]
    
    # Handle case where shift is 0 or multiple of n
    if shift == 0 or n == 0:
        return digits
    
    # Normalize shift to be within range [0, n)
    shift = shift % n
    
    # Perform circular right shift
    # Right shift by 'shift' means taking last 'shift' digits and moving them to front
    return digits[-shift:] + digits[:-shift]
```

The algorithm works as follows:

1. Convert the number to a string of digits (using `abs()` to handle negative numbers)
2. Check if shift is greater than the number of digits - if so, return the reversed string
3. Normalize the shift using modulo to handle cases where shift is larger than the string length
4. For a right circular shift by `shift` positions:
   - Take the last `shift` characters: `digits[-shift:]`
   - Take the remaining characters from the beginning: `digits[:-shift]`
   - Concatenate them in that order

This handles all edge cases including when shift equals the number of digits (full rotation), shift is 0, or shift is greater than the number of digits.