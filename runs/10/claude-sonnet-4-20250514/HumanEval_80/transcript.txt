======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Check if the string length is at least 3
2. Check that every 3 consecutive characters are distinct (no repeating characters within any group of 3)

Let me trace through the examples:
- `is_happy("a")` → False (length < 3)
- `is_happy("aa")` → False (length < 3)
- `is_happy("abcd")` → True (length ≥ 3, and checking every 3 consecutive: "abc" and "bcd" both have distinct characters)
- `is_happy("aabb")` → False ("aab" has repeated 'a', "abb" has repeated 'b')
- `is_happy("adb")` → True (length ≥ 3, "adb" has distinct characters)
- `is_happy("xyy")` → False ("xyy" has repeated 'y')

```python
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    # Check if length is at least 3
    if len(s) < 3:
        return False
    
    # Check every 3 consecutive characters
    for i in range(len(s) - 2):
        # Get 3 consecutive characters
        three_chars = s[i:i+3]
        
        # Check if all 3 characters are distinct
        if len(set(three_chars)) != 3:
            return False
    
    return True
```

The algorithm works by:
1. First checking if the string length is at least 3
2. Then iterating through all possible positions where we can take 3 consecutive characters
3. For each group of 3 characters, converting them to a set and checking if the set has 3 elements (meaning all characters are distinct)
4. If any group of 3 consecutive characters has duplicates, return False
5. If all groups pass the test, return True