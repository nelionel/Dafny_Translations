======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Split the string into words while preserving spaces
2. For each word, sort its characters in ascending ASCII order
3. Reconstruct the string maintaining the original word order and spacing

Let me trace through the examples:
- `'Hi'` → `'Hi'` (characters already in order)
- `'hello'` → `'ehllo'` (sort: e, h, l, l, o)
- `'Hello World!!!'` → `'Hello !!!Wdlor'` (sort each word separately)

```python
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
    if not s:
        return s
    
    # Split the string by spaces to get words
    words = s.split(' ')
    
    # Process each word by sorting its characters
    ordered_words = []
    for word in words:
        # Sort characters in the word by ASCII value
        sorted_word = ''.join(sorted(word))
        ordered_words.append(sorted_word)
    
    # Join the words back with spaces
    return ' '.join(ordered_words)
```

The solution works by:
1. Using `split(' ')` to separate words while preserving the exact spacing structure
2. For each word, using `sorted(word)` to get characters in ascending ASCII order
3. Using `''.join()` to reconstruct each sorted word
4. Using `' '.join()` to reassemble the final string with proper spacing

This preserves the original word order and spacing while sorting the characters within each word.