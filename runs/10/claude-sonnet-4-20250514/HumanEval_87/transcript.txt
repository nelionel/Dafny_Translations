======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Search through a 2D list to find all occurrences of a target value `x`
2. Return coordinates as tuples (row, column)
3. Sort by row ascending, then by column descending within each row

Let me trace through the first example to understand the sorting:
- `x = 1` appears at: (0,0), (1,0), (1,4), (2,0), (2,5)
- Grouped by rows: Row 0: [(0,0)], Row 1: [(1,0), (1,4)], Row 2: [(2,0), (2,5)]
- Within each row, sort columns descending: Row 1: [(1,4), (1,0)], Row 2: [(2,5), (2,0)]
- Final result: [(0,0), (1,4), (1,0), (2,5), (2,0)]

```python
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    """
    coordinates = []
    
    # Find all occurrences of x
    for row_idx, row in enumerate(lst):
        for col_idx, value in enumerate(row):
            if value == x:
                coordinates.append((row_idx, col_idx))
    
    # Sort by row ascending, then by column descending
    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))
    
    return coordinates
```