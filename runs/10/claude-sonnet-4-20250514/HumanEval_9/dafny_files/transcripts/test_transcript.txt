=============== SYSTEM ===============
You are an expert programmer specializing in translating Python tests to the Dafny verification language. Your task is to translate Python `assert` statements into Dafny test methods and provide a minimal dummy implementation for compilation checking.



=============== USER ===============
I need you to translate Python test assertions into Dafny test methods.

**The Method to Test:**
The Dafny method you need to test is named `rolling_max`.

**Python Test Code:**
```python


METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate([]) == []
    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]

```

**Dafny Solution Code (that these tests should test):**
```dafny
method rolling_max(numbers: seq<int>) returns (result: seq<int>)
    ensures |result| == |numbers|
    ensures forall i :: 0 <= i < |result| ==> result[i] == max_up_to(numbers, i)
    ensures forall i :: 0 <= i < |result| - 1 ==> result[i] <= result[i+1]
{
    if |numbers| == 0 {
        return [];
    }
    
    result := [];
    var current_max := numbers[0];
    var index := 0;
    
    while index < |numbers|
        invariant 0 <= index <= |numbers|
        invariant |result| == index
        invariant index > 0 ==> current_max == max_up_to(numbers, index-1)
        invariant forall i :: 0 <= i < index ==> result[i] == max_up_to(numbers, i)
        invariant forall i :: 0 <= i < index - 1 ==> result[i] <= result[i+1]
        decreases |numbers| - index
    {
        if index == 0 {
            current_max := numbers[0];
        } else {
            current_max := if numbers[index] > current_max then numbers[index] else current_max;
        }
        result := result + [current_max];
        index := index + 1;
    }
}

function max_up_to(numbers: seq<int>, i: int): int
    requires 0 <= i < |numbers|
    decreases i
{
    if i == 0 then 
        numbers[0]
    else
        var prev_max := max_up_to(numbers, i-1);
        if numbers[i] > prev_max then numbers[i] else prev_max
}
```

**Your Task:**
1. **Analyze the tests and solution:**
   - Note the exact name (`rolling_max`) and signature of the Dafny method from the provided solution code.

2. **Create a minimal dummy implementation** (in a `<dummy>` block):
   - Create a dummy version of the `rolling_max` Dafny method.
   - The dummy should have the same signature as the method in the full Dafny solution and return appropriate default values (0 for int, false for bool, [] for sequences, etc.).
   - This dummy is ONLY for validating that the test code compiles correctly.

3. **Translate the tests** (in a ```dafny ... ``` block):
   - For each `assert` statement in the Python code, create a Dafny test method with `{:test}` attribute.
   - **All generated test methods must have a complete body and be runnable.**
   - Name them `test_0`, `test_1`, etc.
   - Convert scientific notation (e.g., 1e-6) to decimal form (e.g., 0.000001).
   - Each test method should:
     a. Call the `rolling_max` Dafny method and assign the result to a variable.
     b. Use `expect` to check if the result matches the expected value.

**Example:** If Python has `assert add(2, 3) == 5`, the method to test is `add`, and the Dafny solution has `function add(a: int, b: int): int`, then:
<dummy>
function add(a: int, b: int): int
{
    0
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := add(2, 3);
    expect result == 5;
}
```



=============== ASSISTANT ===============
--- THINKING ---
Let me analyze this step by step:

1. **Analyze the tests and solution:**
   - The method name is `rolling_max`
   - From the solution code, the signature is: `method rolling_max(numbers: seq<int>) returns (result: seq<int>)`
   - The tests are:
     - `candidate([]) == []` - empty input should return empty
     - `candidate([1, 2, 3, 4]) == [1, 2, 3, 4]` - increasing sequence
     - `candidate([4, 3, 2, 1]) == [4, 4, 4, 4]` - decreasing sequence  
     - `candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]` - mixed sequence

2. **Create a minimal dummy implementation:**
   - The method returns `seq<int>`, so I should return `[]` as default
   - Need to match the exact signature from the solution: `method rolling_max(numbers: seq<int>) returns (result: seq<int>)`

3. **Translate the tests:**
   - Need to create test methods with `{:test}` attribute
   - Each should call `rolling_max` and use `expect` to check the result
   - Convert Python lists to Dafny sequences using `[]` notation

Let me write this out:

--- RESPONSE ---
<dummy>
method rolling_max(numbers: seq<int>) returns (result: seq<int>)
{
    result := [];
}
</dummy>

```dafny
method {:test} test_0()
{
    var result := rolling_max([]);
    expect result == [];
}

method {:test} test_1()
{
    var result := rolling_max([1, 2, 3, 4]);
    expect result == [1, 2, 3, 4];
}

method {:test} test_2()
{
    var result := rolling_max([4, 3, 2, 1]);
    expect result == [4, 4, 4, 4];
}

method {:test} test_3()
{
    var result := rolling_max([3, 2, 3, 100, 3]);
    expect result == [3, 3, 3, 100, 100];
}
```

