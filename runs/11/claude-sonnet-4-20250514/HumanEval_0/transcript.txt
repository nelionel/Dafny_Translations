======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to check if any two numbers in the list are closer to each other than the given threshold.

The approach is to compare every pair of numbers in the list and check if their absolute difference is less than the threshold. If I find any such pair, I return `True`. If I check all pairs and none are close enough, I return `False`.

```python
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
```

The algorithm works as follows:
1. Use nested loops to compare each pair of numbers exactly once
2. For each pair at indices `i` and `j` (where `j > i`), calculate the absolute difference
3. If the difference is less than the threshold, return `True` immediately
4. If no close pairs are found after checking all combinations, return `False`

Time complexity: O(nÂ²) where n is the length of the list
Space complexity: O(1) as we only use a constant amount of extra space