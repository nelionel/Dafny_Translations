======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Parse through the string character by character
2. Keep track of the nesting level using a counter
3. When I encounter '(' increment the counter, when I encounter ')' decrement it
4. When the counter reaches 0, I've found a complete balanced group
5. Ignore spaces in the input

Here's my implementation:

```python
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
    result = []
    current_group = ""
    level = 0
    
    for char in paren_string:
        if char == ' ':
            continue  # Ignore spaces
        
        current_group += char
        
        if char == '(':
            level += 1
        elif char == ')':
            level -= 1
            
        # When level reaches 0, we've found a complete balanced group
        if level == 0:
            result.append(current_group)
            current_group = ""
    
    return result
```

The algorithm works as follows:
1. Initialize an empty result list and variables to track the current group and nesting level
2. Iterate through each character in the input string
3. Skip spaces entirely
4. Add non-space characters to the current group
5. Track the nesting level: increment for '(' and decrement for ')'
6. When the level reaches 0, we have a complete balanced group, so add it to results and reset
7. Return the list of separated groups