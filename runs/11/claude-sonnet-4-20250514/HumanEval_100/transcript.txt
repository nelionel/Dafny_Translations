======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Create a pile with `n` levels
2. First level has `n` stones
3. Each subsequent level follows a pattern based on whether `n` is odd or even:
   - If `n` is odd: next levels have the next odd numbers (n, n+2, n+4, ...)
   - If `n` is even: next levels have the next even numbers (n, n+2, n+4, ...)

Let me trace through the example:
- `make_a_pile(3)`: n=3 (odd), so we need 3 levels with odd numbers starting from 3
  - Level 1: 3 stones
  - Level 2: 5 stones (next odd)
  - Level 3: 7 stones (next odd)
  - Result: [3, 5, 7]

```python
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
    result = []
    current_stones = n
    
    for i in range(n):
        result.append(current_stones)
        current_stones += 2  # Next odd if n is odd, next even if n is even
    
    return result
```

The key insight is that whether `n` is odd or even, we always add 2 to get the next number in the sequence:
- If `n` is odd: odd + 2 = next odd number
- If `n` is even: even + 2 = next even number

This creates a simple pattern where each level has 2 more stones than the previous level.