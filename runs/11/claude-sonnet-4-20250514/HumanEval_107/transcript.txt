======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Find all palindromic numbers in the range [1, n] (inclusive)
2. Count how many are even and how many are odd
3. Return a tuple with (even_count, odd_count)

A palindrome reads the same forwards and backwards. To check if a number is a palindrome, I can convert it to a string and compare it with its reverse.

```python
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    def is_palindrome(num):
        """Check if a number is a palindrome"""
        num_str = str(num)
        return num_str == num_str[::-1]
    
    even_count = 0
    odd_count = 0
    
    # Check each number from 1 to n (inclusive)
    for i in range(1, n + 1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    
    return (even_count, odd_count)
```

The solution works as follows:

1. **Helper function `is_palindrome(num)`**: Converts the number to a string and checks if it's equal to its reverse using slicing `[::-1]`.

2. **Main logic**: Iterate through all numbers from 1 to n (inclusive), and for each palindrome found:
   - If the number is even (`i % 2 == 0`), increment the even counter
   - If the number is odd, increment the odd counter

3. **Return**: A tuple containing `(even_count, odd_count)`

Let me verify with the examples:
- **Example 1 (n=3)**: Palindromes are 1, 2, 3. Even: 2 (count=1), Odd: 1, 3 (count=2) → (1, 2) ✓
- **Example 2 (n=12)**: Palindromes are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Even: 2, 4, 6, 8 (count=4), Odd: 1, 3, 5, 7, 9, 11 (count=6) → (4, 6) ✓