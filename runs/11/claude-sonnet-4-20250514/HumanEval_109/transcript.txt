======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to determine if an array can be sorted in non-decreasing order by performing right shift operations.

Let me analyze what a right shift does:
- It moves all elements one position to the right
- The last element wraps around to the first position
- Multiple right shifts are equivalent to rotating the array

The key insight is that if an array can be sorted by right shifts, then the sorted version of the array must be a rotation of the original array.

Here's my approach:
1. Handle the empty array case (return True)
2. Create a sorted version of the array
3. Check if the sorted array can be obtained by rotating the original array
4. I can do this by concatenating the original array with itself and checking if the sorted array appears as a substring

```python
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    # Handle empty array case
    if not arr:
        return True
    
    # Get the sorted version of the array
    sorted_arr = sorted(arr)
    
    # If the array is already sorted, return True
    if arr == sorted_arr:
        return True
    
    # Check if sorted array is a rotation of the original array
    # We can do this by checking if sorted_arr appears in arr + arr
    # Convert to strings for easier substring matching
    arr_str = str(arr)
    double_arr_str = str(arr + arr)
    sorted_arr_str = str(sorted_arr)
    
    # Check if the sorted array appears as a rotation in the doubled array
    return sorted_arr_str in double_arr_str
```

Wait, let me reconsider this approach. The string method might not work reliably due to formatting issues. Let me use a more direct approach:

```python
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
    # Handle empty array case
    if not arr:
        return True
    
    # Get the sorted version of the array
    sorted_arr = sorted(arr)
    
    # Check all possible rotations of the original array
    n = len(arr)
    for i in range(n):
        # Create a rotation by taking elements from position i to end, then from start to i
        rotated = arr[i:] + arr[:i]
        if rotated == sorted_arr:
            return True
    
    return False
```