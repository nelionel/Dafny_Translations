======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Find vowels that are between two consonants (not at the beginning or end)
2. Return the closest one from the right side
3. Handle case sensitivity
4. Return empty string if no such vowel exists

Let me trace through the examples:
- "yogurt": vowels are 'o' (pos 1) and 'u' (pos 3). 'o' is after consonant 'y' and before consonant 'g'. 'u' is after consonant 'g' and before consonant 'r'. From the right, 'u' is closest.
- "FULL": vowel 'U' (pos 1) is after consonant 'F' and before consonant 'L'. It's the only qualifying vowel.
- "quick": vowels are 'u' (pos 1) and 'i' (pos 2). 'u' is after consonant 'q' but 'i' is right after 'u' (vowel), so 'i' doesn't qualify. 'u' is before consonant 'c' but we need to check if it's actually between consonants properly.
- "ab": only 2 letters, no vowel can be between consonants.

```python
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
    
    vowels = "aeiouAEIOU"
    
    # Need at least 3 characters to have a vowel between consonants
    if len(word) < 3:
        return ""
    
    # Search from right to left, excluding first and last characters
    for i in range(len(word) - 2, 0, -1):
        char = word[i]
        
        # Check if current character is a vowel
        if char in vowels:
            # Check if it's between two consonants
            left_char = word[i - 1]
            right_char = word[i + 1]
            
            # Both adjacent characters must be consonants
            if left_char not in vowels and right_char not in vowels:
                return char
    
    return ""
```

The algorithm works as follows:

1. First, I check if the word has at least 3 characters, since we need a vowel between two consonants
2. I iterate from right to left through the word, excluding the first and last positions (since vowels at the beginning and end don't count)
3. For each character, I check if it's a vowel
4. If it is a vowel, I check if both adjacent characters are consonants
5. If both conditions are met, I return that vowel (this will be the closest from the right)
6. If no such vowel is found, I return an empty string

This handles all the test cases correctly:
- "yogurt": finds 'u' at position 3 (between 'g' and 'r')
- "FULL": finds 'U' at position 1 (between 'F' and 'L') 
- "quick": 'u' is between 'q' and 'i', but 'i' is a vowel, so it doesn't qualify; 'i' is between 'u' and 'c', but 'u' is a vowel, so it doesn't qualify
- "ab": too short, returns empty string