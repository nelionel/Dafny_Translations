======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to implement the greatest common divisor (GCD) function. The most efficient approach is to use Euclid's algorithm, which repeatedly applies the principle that gcd(a, b) = gcd(b, a mod b) until one of the numbers becomes 0.

```python
def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
    # Handle edge cases where one or both numbers are 0
    if a == 0:
        return abs(b)
    if b == 0:
        return abs(a)
    
    # Make both numbers positive for the algorithm
    a, b = abs(a), abs(b)
    
    # Euclidean algorithm
    while b != 0:
        a, b = b, a % b
    
    return a
```

The algorithm works as follows:
1. Handle edge cases where either number is 0
2. Convert both numbers to positive values since GCD is always positive
3. Apply Euclid's algorithm: repeatedly replace the larger number with the remainder of dividing the larger by the smaller
4. When one number becomes 0, the other is the GCD

This implementation correctly handles the test cases:
- `greatest_common_divisor(3, 5)` returns 1 (since 3 and 5 are coprime)
- `greatest_common_divisor(25, 15)` returns 5 (since 25 = 5×5 and 15 = 3×5)