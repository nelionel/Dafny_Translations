======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Split the sentence into words
2. Check if each word's length is a prime number
3. Keep only words with prime lengths in their original order
4. Join them back into a string

First, I'll need a helper function to check if a number is prime, then implement the main logic.

```python
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
    
    def is_prime(n):
        """Check if a number is prime"""
        if n < 2:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        
        # Check odd divisors up to sqrt(n)
        for i in range(3, int(n**0.5) + 1, 2):
            if n % i == 0:
                return False
        return True
    
    # Split sentence into words
    words = sentence.split()
    
    # Filter words whose lengths are prime numbers
    prime_length_words = []
    for word in words:
        if is_prime(len(word)):
            prime_length_words.append(word)
    
    # Join the filtered words back into a string
    return " ".join(prime_length_words)
```

Let me trace through the examples:

Example 1: "This is a test"
- "This" has length 4 (not prime: 4 = 2×2)
- "is" has length 2 (prime)
- "a" has length 1 (not prime)
- "test" has length 4 (not prime: 4 = 2×2)
- Result: "is"

Example 2: "lets go for swimming"
- "lets" has length 4 (not prime: 4 = 2×2)
- "go" has length 2 (prime)
- "for" has length 3 (prime)
- "swimming" has length 8 (not prime: 8 = 2×4)
- Result: "go for"

The solution correctly identifies prime lengths and maintains the original word order.