======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''


======THINKING======


======MODEL OUTPUT======
Looking at this function, I need to:

1. Filter the list to only include numbers that are:
   - Positive (not negative)
   - Integers (not floats)
   - Odd numbers
2. Square each qualifying number
3. Sum all the squares
4. Return 0 if the list is empty

Let me trace through the examples:
- `[1, 3, 2, 0]`: 1 is odd positive integer (1²=1), 3 is odd positive integer (3²=9), 2 is even (skip), 0 is even (skip) → 1 + 9 = 10
- `[-1, -2, 0]`: -1 is negative (skip), -2 is negative (skip), 0 is even (skip) → 0
- `[9, -2]`: 9 is odd positive integer (9²=81), -2 is negative (skip) → 81
- `[0]`: 0 is even (skip) → 0

```python
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    if not lst:
        return 0
    
    total = 0
    for num in lst:
        # Check if the number is a positive integer and odd
        if isinstance(num, int) and num > 0 and num % 2 == 1:
            total += num ** 2
        # Also handle floats that are actually integers (like 3.0)
        elif isinstance(num, float) and num.is_integer() and num > 0 and int(num) % 2 == 1:
            total += int(num) ** 2
    
    return total
```