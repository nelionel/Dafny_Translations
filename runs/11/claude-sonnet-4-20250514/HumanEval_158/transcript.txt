======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Find the word with the maximum number of unique characters
2. If there's a tie, return the lexicographically first word
3. Handle edge cases like empty lists

Let me trace through the examples:
- `["name", "of", "string"]`: "name" has 4 unique chars, "of" has 2, "string" has 6 → return "string"
- `["name", "enam", "game"]`: all have 4 unique chars, lexicographically "enam" < "game" < "name" → return "enam"
- `["aaaaaaa", "bb", "cc"]`: "aaaaaaa" has 1 unique char, "bb" has 1, "cc" has 1, lexicographically "aaaaaaa" comes first → return "aaaaaaa"

```python
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == "aaaaaaa"
    """
    if not words:
        return ""
    
    max_unique_count = 0
    result = ""
    
    for word in words:
        unique_count = len(set(word))
        
        # Update result if this word has more unique characters,
        # or if it has the same number but comes first lexicographically
        if (unique_count > max_unique_count or 
            (unique_count == max_unique_count and word < result)):
            max_unique_count = unique_count
            result = word
    
    return result
```