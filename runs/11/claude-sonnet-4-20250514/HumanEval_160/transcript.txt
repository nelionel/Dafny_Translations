======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Build an algebraic expression from two lists: operators and operands
2. Evaluate the expression following proper order of operations
3. Handle the basic algebra operations: +, -, *, //, **

The key insight is that I need to respect operator precedence:
- ** (exponentiation) has highest precedence
- *, // have medium precedence  
- +, - have lowest precedence

I'll build the expression as a string and then evaluate it, or alternatively, I can process the operations in the correct order.

```python
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
    # Create a copy of operands to work with
    operands = operand.copy()
    operators = operator.copy()
    
    # Process exponentiation first (highest precedence)
    i = 0
    while i < len(operators):
        if operators[i] == '**':
            result = operands[i] ** operands[i + 1]
            operands[i] = result
            operands.pop(i + 1)
            operators.pop(i)
        else:
            i += 1
    
    # Process multiplication and floor division (medium precedence)
    i = 0
    while i < len(operators):
        if operators[i] == '*':
            result = operands[i] * operands[i + 1]
            operands[i] = result
            operands.pop(i + 1)
            operators.pop(i)
        elif operators[i] == '//':
            result = operands[i] // operands[i + 1]
            operands[i] = result
            operands.pop(i + 1)
            operators.pop(i)
        else:
            i += 1
    
    # Process addition and subtraction (lowest precedence)
    i = 0
    while i < len(operators):
        if operators[i] == '+':
            result = operands[i] + operands[i + 1]
            operands[i] = result
            operands.pop(i + 1)
            operators.pop(i)
        elif operators[i] == '-':
            result = operands[i] - operands[i + 1]
            operands[i] = result
            operands.pop(i + 1)
            operators.pop(i)
        else:
            i += 1
    
    return operands[0]
```

The algorithm works by:

1. Making copies of the input lists to avoid modifying the originals
2. Processing operations in order of precedence:
   - First: `**` (exponentiation)
   - Second: `*` and `//` (multiplication and floor division)
   - Third: `+` and `-` (addition and subtraction)
3. For each precedence level, scanning through the operators list and when finding a matching operator:
   - Performing the operation between the corresponding operands
   - Replacing the first operand with the result
   - Removing the second operand and the operator from their respective lists
4. Returning the final result (which will be the only remaining operand)

This approach correctly handles operator precedence and evaluates the expression as intended.