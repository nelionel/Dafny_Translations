======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to extract the decimal part of a positive floating point number. The decimal part is what remains after removing the integer part.

For example:
- 3.5 → integer part is 3, decimal part is 0.5
- 7.25 → integer part is 7, decimal part is 0.25

I can achieve this by using the modulo operator (%) with 1, which will give me the remainder when the number is divided by 1 (i.e., the fractional part).

```python
def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
    return number % 1
```

The modulo operator with 1 effectively removes the integer part and returns only the decimal portion. This works because:
- `number % 1` returns the remainder when `number` is divided by 1
- For any positive number, this remainder is exactly the decimal part
- For example: `3.5 % 1 = 0.5`, `7.25 % 1 = 0.25`