======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """


======THINKING======


======MODEL OUTPUT======
Looking at this function, I need to implement a prime number checker. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.

Let me analyze the test cases:
- 6: Not prime (divisible by 2, 3)
- 101: Prime
- 11: Prime
- 13441: Prime
- 61: Prime
- 4: Not prime (divisible by 2)
- 1: Not prime (by definition)

Here's the implementation:

```python
def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
    # Numbers less than or equal to 1 are not prime
    if n <= 1:
        return False
    
    # 2 is the only even prime number
    if n == 2:
        return True
    
    # Even numbers greater than 2 are not prime
    if n % 2 == 0:
        return False
    
    # Check for odd divisors from 3 up to sqrt(n)
    # We only need to check up to sqrt(n) because if n has a divisor
    # greater than sqrt(n), it must also have a corresponding divisor
    # less than sqrt(n)
    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2  # Only check odd numbers
    
    return True
```

This implementation:
1. Handles edge cases (numbers ≤ 1 are not prime)
2. Handles 2 as a special case (the only even prime)
3. Quickly eliminates even numbers > 2
4. Only checks odd potential divisors up to √n for efficiency
5. Returns True if no divisors are found

The algorithm is efficient with O(√n) time complexity.