======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Generate Fibonacci numbers
2. Check if each Fibonacci number is prime
3. Return the n-th number that satisfies both conditions

Let me break this down:
- Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
- Prime numbers: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, ...
- Fibonacci numbers that are also prime: 2, 3, 5, 13, 89, ...

```python
def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
    def is_prime(num):
        """Check if a number is prime."""
        if num < 2:
            return False
        if num == 2:
            return True
        if num % 2 == 0:
            return False
        
        # Check odd divisors up to sqrt(num)
        i = 3
        while i * i <= num:
            if num % i == 0:
                return False
            i += 2
        return True
    
    def fibonacci_generator():
        """Generate Fibonacci numbers."""
        a, b = 0, 1
        while True:
            yield a
            a, b = b, a + b
    
    count = 0
    fib_gen = fibonacci_generator()
    
    for fib_num in fib_gen:
        if is_prime(fib_num):
            count += 1
            if count == n:
                return fib_num
```

The solution works as follows:

1. **`is_prime(num)`**: A helper function to check if a number is prime
   - Returns `False` for numbers less than 2
   - Returns `True` for 2 (the only even prime)
   - Returns `False` for other even numbers
   - Checks odd divisors up to the square root of the number

2. **`fibonacci_generator()`**: A generator that yields Fibonacci numbers one by one
   - Starts with 0, 1 and continuously generates the next Fibonacci number
   - Uses tuple unpacking for efficient computation: `a, b = b, a + b`

3. **Main logic**: 
   - Iterates through Fibonacci numbers
   - Checks if each is prime
   - Counts prime Fibonacci numbers until we reach the n-th one
   - Returns the n-th prime Fibonacci number

The function correctly handles the test cases:
- `prime_fib(1)` returns 2 (1st prime Fibonacci number)
- `prime_fib(2)` returns 3 (2nd prime Fibonacci number)
- `prime_fib(3)` returns 5 (3rd prime Fibonacci number)
- `prime_fib(4)` returns 13 (4th prime Fibonacci number)
- `prime_fib(5)` returns 89 (5th prime Fibonacci number)