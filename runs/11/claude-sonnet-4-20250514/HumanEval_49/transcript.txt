======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to implement a function that calculates 2^n modulo p efficiently. The key insight is to use Python's built-in `pow()` function with three arguments, which implements modular exponentiation efficiently using the square-and-multiply algorithm.

```python
def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
    return pow(2, n, p)
```

This implementation:
1. Uses Python's built-in `pow(base, exponent, modulus)` function
2. Efficiently computes 2^n mod p without computing the full value of 2^n first
3. Handles large values of n without overflow issues
4. Returns the correct results for all the test cases:
   - modp(3, 5) = 2³ mod 5 = 8 mod 5 = 3
   - modp(1101, 101) = 2¹¹⁰¹ mod 101 = 2
   - modp(0, 101) = 2⁰ mod 101 = 1 mod 101 = 1
   - modp(3, 11) = 2³ mod 11 = 8 mod 11 = 8
   - modp(100, 101) = 2¹⁰⁰ mod 101 = 1