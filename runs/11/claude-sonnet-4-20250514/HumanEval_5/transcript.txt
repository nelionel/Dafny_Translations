======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """


======THINKING======


======MODEL OUTPUT======
Looking at this function, I need to insert a delimiter between every two consecutive elements in the input list.

Let me analyze the examples:
- Empty list `[]` with delimiter `4` â†’ `[]` (no elements to separate)
- List `[1, 2, 3]` with delimiter `4` â†’ `[1, 4, 2, 4, 3]` (delimiter inserted between each pair)

Here's the implementation:

```python
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    if len(numbers) <= 1:
        return numbers
    
    result = []
    for i in range(len(numbers)):
        result.append(numbers[i])
        if i < len(numbers) - 1:  # Don't add delimiter after the last element
            result.append(delimeter)
    
    return result
```

The algorithm works as follows:
1. If the list has 0 or 1 elements, return it as-is (no need for delimiters)
2. Otherwise, iterate through each element in the original list
3. Add the current element to the result
4. If it's not the last element, add the delimiter after it
5. Return the result list

This handles all edge cases including empty lists and single-element lists.