======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to check if every opening bracket "<" has a corresponding closing bracket ">", and they are properly nested.

The key insight is to use a counter approach:
- Increment counter for each opening bracket "<"
- Decrement counter for each closing bracket ">"
- If counter goes negative, we have a closing bracket without a matching opening bracket
- At the end, counter should be zero for all brackets to be matched

```python
def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
    counter = 0
    
    for bracket in brackets:
        if bracket == "<":
            counter += 1
        elif bracket == ">":
            counter -= 1
            # If counter goes negative, we have more closing than opening brackets
            if counter < 0:
                return False
    
    # All brackets are matched if counter is exactly 0
    return counter == 0
```

The algorithm works as follows:
1. Initialize a counter to 0
2. For each character in the string:
   - If it's "<", increment the counter (we have an unmatched opening bracket)
   - If it's ">", decrement the counter (we're closing a bracket)
   - If the counter becomes negative, it means we have a closing bracket without a matching opening bracket, so return False
3. After processing all characters, return True only if the counter is 0 (all brackets matched)

This handles all the test cases:
- `"<"`: counter ends at 1 (unmatched opening) → False
- `"<>"`: counter goes 1→0 → True  
- `"<<><>>"`: counter goes 1→2→1→0→1→0 → True
- `"><<>"`: counter goes -1 immediately → False