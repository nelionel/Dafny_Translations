======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to find the largest prime factor of a given number `n`. I'll use trial division, checking for factors from 2 upwards and dividing them out completely when found.

```python
def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
    largest = 1
    
    # Check for factor 2
    while n % 2 == 0:
        largest = 2
        n //= 2
    
    # Check for odd factors from 3 onwards
    factor = 3
    while factor * factor <= n:
        while n % factor == 0:
            largest = factor
            n //= factor
        factor += 2
    
    # If n is still greater than 1, then it's a prime factor
    if n > 1:
        largest = n
    
    return largest
```

The algorithm works as follows:

1. First, I handle the factor 2 separately by dividing it out completely while updating the largest prime factor found
2. Then I check odd numbers starting from 3, only going up to √n (since if n has a factor greater than √n, it must also have a corresponding factor less than √n)
3. For each factor found, I divide it out completely from n
4. If after all this process n is still greater than 1, then n itself is a prime factor (and will be the largest one)

This approach is efficient because:
- It only checks up to √n
- It skips even numbers after 2
- It completely removes each prime factor when found, reducing the search space