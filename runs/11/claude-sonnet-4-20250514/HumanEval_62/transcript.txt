======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======


def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to compute the derivative of a polynomial represented by its coefficients.

For a polynomial `xs[0] + xs[1] * x + xs[2] * x^2 + xs[3] * x^3 + ...`, the derivative is:
- The constant term `xs[0]` disappears (derivative of constant is 0)
- The `xs[1] * x` term becomes `xs[1]` (derivative of `x` is 1)
- The `xs[2] * x^2` term becomes `2 * xs[2] * x` (derivative of `x^2` is `2x`)
- The `xs[3] * x^3` term becomes `3 * xs[3] * x^2` (derivative of `x^3` is `3x^2`)
- And so on...

So the derivative coefficients are: `[xs[1], 2*xs[2], 3*xs[3], 4*xs[4], ...]`

```python
def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
    if len(xs) <= 1:
        return []
    
    return [i * xs[i] for i in range(1, len(xs))]
```

The implementation works as follows:
1. If the polynomial has 1 or fewer coefficients (constant or empty), the derivative is empty (constant derivative is 0)
2. For each coefficient `xs[i]` where `i >= 1`, multiply it by its power `i` to get the derivative coefficient
3. The resulting list has one fewer element than the original since the constant term disappears