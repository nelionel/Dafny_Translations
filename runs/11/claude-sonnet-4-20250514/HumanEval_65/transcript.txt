======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Convert the integer to a string to work with individual digits
2. Handle the case where shift is greater than the number of digits (return reversed digits)
3. Perform a circular right shift by moving digits from the end to the beginning
4. Return the result as a string

Let me trace through the examples:
- `circular_shift(12, 1)`: "12" → shift right by 1 → "21"
- `circular_shift(12, 2)`: "12" → shift by 2 (≥ length 2) → return reversed → "21"

Wait, let me reconsider the second example. If shift equals the number of digits, it should return to original position, but the docstring says "If shift > number of digits, return digits reversed." So for shift = 2 and digits = 2, since shift is not > digits, we do normal circular shift, which returns to original "12".

```python
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
    # Convert to string to work with digits
    digits = str(abs(x))  # Use abs to handle negative numbers
    n = len(digits)
    
    # If shift is greater than number of digits, return reversed
    if shift > n:
        return digits[::-1]
    
    # Perform circular right shift
    # shift % n handles cases where shift >= n
    shift = shift % n
    
    # Right shift: take last 'shift' digits and move to front
    if shift == 0:
        return digits
    
    return digits[-shift:] + digits[:-shift]
```