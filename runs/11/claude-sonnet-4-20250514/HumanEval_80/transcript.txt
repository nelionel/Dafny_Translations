======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Check if the string length is at least 3
2. Check that every 3 consecutive letters are distinct (no two letters are the same within any group of 3 consecutive characters)

Let me trace through the examples:
- `is_happy(a)` => False (length < 3)
- `is_happy(aa)` => False (length < 3)
- `is_happy(abcd)` => True (length >= 3, and checking consecutive triplets: "abc" all distinct, "bcd" all distinct)
- `is_happy(aabb)` => False (checking "aab" - 'a' appears twice, "abb" - 'b' appears twice)
- `is_happy(adb)` => True (length >= 3, "adb" all distinct)
- `is_happy(xyy)` => False ("xyy" has 'y' appearing twice)

```python
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
    # Check if length is at least 3
    if len(s) < 3:
        return False
    
    # Check every 3 consecutive letters
    for i in range(len(s) - 2):
        # Get 3 consecutive characters
        triplet = s[i:i+3]
        
        # Check if all 3 characters are distinct
        if len(set(triplet)) != 3:
            return False
    
    return True
```

The algorithm works by:
1. First checking if the string length is at least 3
2. Then iterating through all possible positions where we can extract 3 consecutive characters
3. For each triplet of consecutive characters, converting to a set to remove duplicates
4. If the set has length 3, all characters were distinct; if less than 3, there were duplicates
5. Return False if any triplet has duplicates, True if all triplets have distinct characters