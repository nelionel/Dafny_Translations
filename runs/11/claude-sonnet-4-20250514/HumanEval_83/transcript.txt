======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to count n-digit positive integers that either start with 1 OR end with 1.

Let me break this down using the inclusion-exclusion principle:
- Count numbers that start with 1
- Count numbers that end with 1  
- Subtract numbers that both start AND end with 1 (to avoid double counting)

For n-digit positive integers:
- Numbers that start with 1: The first digit is fixed as 1, and the remaining (n-1) digits can be any of 0-9. So there are 10^(n-1) such numbers.
- Numbers that end with 1: The last digit is fixed as 1, and the remaining (n-1) digits can be chosen such that the first digit is 1-9 (can't be 0 for n-digit numbers). So the first digit has 9 choices, and the middle (n-2) digits have 10 choices each. This gives us 9 Ã— 10^(n-2) numbers.
- Numbers that both start and end with 1: First and last digits are fixed as 1, middle (n-2) digits can be 0-9. This gives us 10^(n-2) numbers.

Special case: when n=1, the only 1-digit number that starts or ends with 1 is just "1" itself.

```python
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
    if n == 1:
        return 1
    
    # Numbers that start with 1: 1 followed by (n-1) digits (0-9)
    starts_with_1 = 10 ** (n - 1)
    
    # Numbers that end with 1: first digit (1-9), middle digits (0-9), last digit 1
    ends_with_1 = 9 * (10 ** (n - 2))
    
    # Numbers that both start and end with 1: 1, middle digits (0-9), 1
    both_start_end_1 = 10 ** (n - 2)
    
    # Apply inclusion-exclusion principle
    return starts_with_1 + ends_with_1 - both_start_end_1
```