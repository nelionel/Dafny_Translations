======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Search through a 2D list for occurrences of a specific value `x`
2. Record the coordinates (row, column) of each occurrence
3. Sort by row first (ascending), then by column within each row (descending)

Let me trace through the first example to understand the sorting:
- `x = 1` appears at: (0,0), (1,0), (1,4), (2,0), (2,5)
- Sorted by row ascending: (0,0), (1,0), (1,4), (2,0), (2,5)
- Within each row, sort by column descending: (0,0), (1,4), (1,0), (2,5), (2,0)

```python
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    """
    coordinates = []
    
    # Find all occurrences of x and their coordinates
    for row_idx, row in enumerate(lst):
        for col_idx, value in enumerate(row):
            if value == x:
                coordinates.append((row_idx, col_idx))
    
    # Sort by row (ascending) first, then by column (descending) within each row
    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))
    
    return coordinates
```

The key insight is using the sorting key `(coord[0], -coord[1])` where:
- `coord[0]` is the row index (sorted ascending)
- `-coord[1]` is the negative column index (which makes columns sort in descending order)

This ensures that coordinates are first grouped by row in ascending order, and within each row, columns are sorted in descending order.