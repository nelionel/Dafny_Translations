======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """


======THINKING======


======MODEL OUTPUT======
Looking at the examples, I need to figure out the pattern:

- 'hi' → 'lm': h(8th letter) → l(12th letter), i(9th letter) → m(13th letter)
- 'gf' → 'kj': g(7th letter) → k(11th letter), f(6th letter) → j(10th letter)
- 'et' → 'ix': e(5th letter) → i(9th letter), t(20th letter) → x(24th letter)

The pattern shows each letter shifts by 4 positions (2 × 2 = 4).

```python
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
    result = ""
    
    for char in s:
        if char.isalpha():
            # Check if uppercase or lowercase
            if char.isupper():
                # Shift by 4 positions for uppercase letters
                shifted = chr((ord(char) - ord('A') + 4) % 26 + ord('A'))
            else:
                # Shift by 4 positions for lowercase letters
                shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))
            result += shifted
        else:
            # Non-alphabetic characters remain unchanged
            result += char
    
    return result
```