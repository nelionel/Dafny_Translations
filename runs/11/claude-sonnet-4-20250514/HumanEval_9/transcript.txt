======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to create a function that returns a list where each element is the maximum value seen so far in the input sequence.

Let me trace through the example:
- At index 0: max so far is 1 → [1]
- At index 1: max so far is max(1, 2) = 2 → [1, 2]
- At index 2: max so far is max(1, 2, 3) = 3 → [1, 2, 3]
- At index 3: max so far is max(1, 2, 3, 2) = 3 → [1, 2, 3, 3]
- And so on...

Here's the implementation:

```python
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
    if not numbers:
        return []
    
    result = []
    current_max = numbers[0]
    
    for num in numbers:
        current_max = max(current_max, num)
        result.append(current_max)
    
    return result
```

The algorithm works by:
1. Handling the edge case of an empty list
2. Initializing the current maximum with the first element
3. Iterating through each number in the list
4. Updating the current maximum if the current number is larger
5. Appending the current maximum to the result list

This gives us O(n) time complexity and O(n) space complexity for the result list.