======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to find all prime numbers that are less than `n` and return them in an array.

Let me break down the approach:
1. Handle edge cases (n <= 1)
2. Create a helper function to check if a number is prime
3. Iterate through numbers from 2 to n-1 and collect primes

```python
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
    if n <= 1:
        return []
    
    def is_prime(num):
        if num < 2:
            return False
        if num == 2:
            return True
        if num % 2 == 0:
            return False
        
        # Check odd divisors up to sqrt(num)
        for i in range(3, int(num**0.5) + 1, 2):
            if num % i == 0:
                return False
        return True
    
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    
    return primes
```

The solution works as follows:

1. **Edge case handling**: If `n <= 1`, return an empty list since there are no primes less than 2.

2. **Prime checking function**: The `is_prime` helper function efficiently checks if a number is prime by:
   - Handling cases for numbers less than 2 (not prime)
   - Handling the case for 2 (prime)
   - Checking if the number is even (not prime except for 2)
   - Testing odd divisors only up to the square root of the number

3. **Main logic**: Iterate through all numbers from 2 to n-1 and collect those that are prime.

This implementation is efficient and handles all the test cases correctly.