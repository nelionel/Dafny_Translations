======SYSTEM PROMPT======
You are a Python coding assistant. Your task is to write a Python script with the full implementation of the function described in the user prompt. The implementation should be inside a markdown code block.

======USER PROMPT======

def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''


======THINKING======


======MODEL OUTPUT======
Looking at this problem, I need to:

1. Convert the string to a float
2. Handle the special case where the number is equidistant from two integers (i.e., has a fractional part of exactly 0.5)
3. For the equidistant case, round away from zero
4. For all other cases, use normal rounding

Let me implement this step by step:

```python
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
    # Convert string to float
    num = float(value)
    
    # Get the fractional part
    fractional_part = abs(num - int(num))
    
    # Check if the number is equidistant from two integers (fractional part is 0.5)
    if abs(fractional_part - 0.5) < 1e-9:  # Using small epsilon for floating point comparison
        # Round away from zero
        if num >= 0:
            return int(num) + 1
        else:
            return int(num) - 1
    else:
        # Normal rounding
        return round(num)
```

The solution works as follows:

1. **Convert to float**: `float(value)` converts the string to a number
2. **Check for equidistant case**: I calculate the fractional part and check if it's exactly 0.5
3. **Round away from zero**: 
   - For positive numbers: if fractional part is 0.5, add 1 to the integer part
   - For negative numbers: if fractional part is 0.5, subtract 1 from the integer part
4. **Normal rounding**: For all other cases, use Python's built-in `round()` function

The key insight is that "rounding away from zero" means:
- For positive numbers like 14.5: round up to 15
- For negative numbers like -14.5: round down (more negative) to -15

This ensures that in equidistant cases, we always choose the integer that has a larger absolute value (farther from zero).